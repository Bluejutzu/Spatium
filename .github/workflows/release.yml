name: Release
on:
    push:
        branches:
            - "**"

jobs:
    release:
        strategy:
            matrix:
                os: [windows-latest, macos-latest, ubuntu-latest]
        runs-on: ${{ matrix.os }}
        permissions:
            contents: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20.x"

            - name: Setup pnpm
              uses: pnpm/action-setup@v3.0.0
              with:
                  version: latest
                  run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v4
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install

            # Install system dependencies for Linux
            - name: Install Linux dependencies
              if: matrix.os == 'ubuntu-latest'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

            # Build the app
            - name: Build the app
              run: |
                  pnpm build
                  pnpm run build:${{ matrix.os == 'windows-latest' && 'win' || matrix.os == 'macos-latest' && 'mac' || 'linux' }}

            # Create release
            - name: Create Release
              if: matrix.os == 'ubuntu-latest'
              id: create_release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  # Get the short SHA of the commit
                  SHA=$(git rev-parse --short HEAD)
                  # Get the current timestamp
                  TIMESTAMP=$(date +%Y%m%d_%H%M%S)
                  # Create a release tag
                  RELEASE_TAG="build-${TIMESTAMP}-${SHA}"

                  # Create GitHub Release
                  gh release create $RELEASE_TAG \
                    --title "Build ${TIMESTAMP}" \
                    --notes "Automated build from commit ${SHA}" \
                    --draft=false \
                    --prerelease=false

                  # Save the release tag for other jobs
                  echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV

            # Upload release assets
            - name: Upload Release Assets
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
                      # Get the release tag from environment
                      RELEASE_TAG="${RELEASE_TAG}"
                  else
                      # Get the most recent release tag
                      RELEASE_TAG=$(gh release list -L 1 --json tagName -q '.[0].tagName')
                  fi

                  # Upload all built assets
                  for file in dist/*.{exe,deb,AppImage,dmg,zip,yml}; do
                      if [ -f "$file" ]; then
                          gh release upload "${RELEASE_TAG}" "$file" --clobber || true
                      fi
                  done
